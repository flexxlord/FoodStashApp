{"version":3,"file":"reactnavigationv5.js","sourceRoot":"","sources":["../../../src/js/tracing/reactnavigationv5.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAGvC,OAAO,EACL,sBAAsB,GAEvB,MAAM,0BAA0B,CAAC;AAmBlC,MAAM,6BAA6B,GAAG,GAAG,CAAC;AAE1C;;;;;;;GAOG;AACH,MAAM,OAAO,gCAAiC,SAAQ,sBAAsB;IAA5E;;QAGU,4BAAuB,GAA6B;YAC1D,OAAO,EAAE,IAAI;SACd,CAAC;QAEe,uBAAkB,GAAW,GAAG,CAAC;QAI1C,wCAAmC,GAAY,KAAK,CAAC;QAErD,qBAAgB,GAAa,EAAE,CAAC;QA2IxC,sGAAsG;QAC9F,wBAAmB,GAAG,CAAC,GAAW,EAAQ,EAAE;YAClD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEhC,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,EAAE;gBAC1D,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CACjD,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CACvD,CAAC;aACH;QACH,CAAC,CAAC;IAUJ,CAAC;IA5JC;;OAEG;IACI,8BAA8B,CACnC,QAA4B,EAC5B,cAA8B;QAE9B,KAAK,CAAC,8BAA8B,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QAE/D,mIAAmI;QACnI,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACI,2BAA2B,CAChC,sBAAgD;;QAEhD,IAAI,CAAC,uBAAuB,GAAG,sBAAsB,CAAC;QACtD,MAAA,sBAAsB,CAAC,OAAO,0CAAE,WAAW,CACzC,mBAAmB,EAAE,2CAA2C;QAChE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAC3B;QACF,MAAA,sBAAsB,CAAC,OAAO,0CAAE,WAAW,CACzC,OAAO,EAAE,+CAA+C;QACxD,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAC9B;QAEF,IAAI,IAAI,CAAC,mCAAmC,EAAE;YAC5C,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,IAAI,CAAC,mCAAmC,GAAG,KAAK,CAAC;SAClD;IACH,CAAC;IAED;;OAEG;IACK,mBAAmB;QACzB,sDAAsD;QACtD,IAAI,CAAC,WAAW,EAAE,CAAC;QAEnB,IAAI,CAAC,mCAAmC,GAAG,IAAI,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACK,WAAW;QACjB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,CAC9C,4BAA4B,CAC7B,CAAC;QAEF,IAAI,CAAC,mBAAmB,GAAG,UAAU,CACnC,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,EACzC,6BAA6B,CAC9B,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,cAAc;;QACpB,iDAAiD;QACjD,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC;QACxC,MAAM,KAAK,eAAG,IAAI,CAAC,uBAAuB,0CAAE,OAAO,0CAAE,eAAe,EAAE,CAAC;QAEvE,IAAI,KAAK,EAAE;YACT,IACE,IAAI,CAAC,kBAAkB;gBACvB,CAAC,CAAC,aAAa,IAAI,aAAa,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,CAAC,EACnD;gBACA,MAAM,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAyC,CAAC;gBACnG,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAEnE,MAAM,cAAc,mCACf,eAAe,KAClB,IAAI,EAAE,KAAK,CAAC,IAAI,EAChB,IAAI,kCACC,eAAe,CAAC,IAAI,KACvB,oBAAoB,EAAE,KAAK,CAAC,IAAI,KAElC,IAAI,kCACC,eAAe,CAAC,IAAI,KACvB,KAAK,EAAE;4BACL,IAAI,EAAE,KAAK,CAAC,IAAI;4BAChB,GAAG,EAAE,KAAK,CAAC,GAAG;4BACd,MAAM,QAAE,KAAK,CAAC,MAAM,mCAAI,EAAE;4BAC1B,WAAW,EAAE,gBAAgB;yBAC9B,EACD,aAAa,EAAE,aAAa;4BAC1B,CAAC,CAAC;gCACE,IAAI,EAAE,aAAa,CAAC,IAAI;gCACxB,GAAG,EAAE,aAAa,CAAC,GAAG;gCACtB,MAAM,QAAE,aAAa,CAAC,MAAM,mCAAI,EAAE;6BACnC;4BACH,CAAC,CAAC,IAAI,MAEX,CAAC;gBAEF,IAAI,YAAY,SAAG,IAAI,CAAC,eAAe,+CAApB,IAAI,EAAmB,cAAc,CAAC,CAAC;gBAE1D,mEAAmE;gBACnE,IAAI,CAAC,YAAY,EAAE;oBACjB,MAAM,CAAC,KAAK,CACV,8DAA8D,YAAY,2DAA2D,CACtI,CAAC;oBAEF,YAAY,mCACP,cAAc,KACjB,OAAO,EAAE,KAAK,GACf,CAAC;iBACH;gBAED,IAAI,YAAY,CAAC,OAAO,EAAE;oBACxB,+DAA+D;oBAC/D,IAAI,OAAO,IAAI,CAAC,mBAAmB,KAAK,WAAW,EAAE;wBACnD,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;wBACvC,IAAI,CAAC,mBAAmB,GAAG,SAAS,CAAC;qBACtC;iBACF;qBAAM;oBACL,MAAM,CAAC,GAAG,CACR,iEAAiE,YAAY,CAAC,IAAI,0BAA0B,CAC7G,CAAC;iBACH;gBAED,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;aACzD;YAED,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACpC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;SAC3B;IACH,CAAC;IAaD,wEAAwE;IAChE,yBAAyB;QAC/B,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3B,IAAI,CAAC,kBAAkB,CAAC,OAAO,GAAG,KAAK,CAAC;YACxC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;YACjC,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;SACrC;IACH,CAAC;;AAzKM,oDAAmB,GAAW,qBAAqB,CAAC;AA4K7D,MAAM,CAAC,MAAM,4BAA4B,GAAG;IAC1C,IAAI,EAAE,cAAc;IACpB,EAAE,EAAE,YAAY;IAChB,IAAI,EAAE;QACJ,yBAAyB,EACvB,gCAAgC,CAAC,mBAAmB;KACvD;IACD,IAAI,EAAE,EAAE;CACT,CAAC","sourcesContent":["import { Transaction as TransactionType } from \"@sentry/types\";\nimport { logger } from \"@sentry/utils\";\n\nimport { BeforeNavigate } from \"./reactnativetracing\";\nimport {\n  RoutingInstrumentation,\n  TransactionCreator,\n} from \"./routingInstrumentation\";\nimport { ReactNavigationTransactionContext } from \"./types\";\n\nexport interface NavigationRouteV5 {\n  name: string;\n  key: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  params?: Record<string, any>;\n}\n\ninterface NavigationContainerV5 {\n  addListener: (type: string, listener: () => void) => void;\n  getCurrentRoute: () => NavigationRouteV5;\n}\n\ntype NavigationContainerV5Ref = {\n  current: NavigationContainerV5 | null;\n};\n\nconst STATE_CHANGE_TIMEOUT_DURATION = 200;\n\n/**\n * Instrumentation for React-Navigation V5. See docs or sample app for usage.\n *\n * How this works:\n * - `_onDispatch` is called every time a dispatch happens and sets an IdleTransaction on the scope without any route context.\n * - `_onStateChange` is then called AFTER the state change happens due to a dispatch and sets the route context onto the active transaction.\n * - If `_onStateChange` isn't called within `STATE_CHANGE_TIMEOUT_DURATION` of the dispatch, then the transaction is not sampled and finished.\n */\nexport class ReactNavigationV5Instrumentation extends RoutingInstrumentation {\n  static instrumentationName: string = \"react-navigation-v5\";\n\n  private _navigationContainerRef: NavigationContainerV5Ref = {\n    current: null,\n  };\n\n  private readonly _maxRecentRouteLen: number = 200;\n\n  private _latestRoute?: NavigationRouteV5;\n  private _latestTransaction?: TransactionType;\n  private _shouldUpdateLatestTransactionOnRef: boolean = false;\n  private _stateChangeTimeout?: number | undefined;\n  private _recentRouteKeys: string[] = [];\n\n  /**\n   * Extends by calling _handleInitialState at the end.\n   */\n  public registerRoutingInstrumentation(\n    listener: TransactionCreator,\n    beforeNavigate: BeforeNavigate\n  ): void {\n    super.registerRoutingInstrumentation(listener, beforeNavigate);\n\n    // Need to handle the initial state as the navigation container listeners will only start transactions on subsequent route changes.\n    this._handleInitialState();\n  }\n\n  /**\n   * Pass the ref to the navigation container to register it to the instrumentation\n   * @param navigationContainerRef Ref to a `NavigationContainer`\n   */\n  public registerNavigationContainer(\n    navigationContainerRef: NavigationContainerV5Ref\n  ): void {\n    this._navigationContainerRef = navigationContainerRef;\n    navigationContainerRef.current?.addListener(\n      \"__unsafe_action__\", // This action is emitted on every dispatch\n      this._onDispatch.bind(this)\n    );\n    navigationContainerRef.current?.addListener(\n      \"state\", // This action is emitted on every state change\n      this._onStateChange.bind(this)\n    );\n\n    if (this._shouldUpdateLatestTransactionOnRef) {\n      this._onStateChange();\n      this._shouldUpdateLatestTransactionOnRef = false;\n    }\n  }\n\n  /**\n   *\n   */\n  private _handleInitialState(): void {\n    // This will set a transaction for the initial screen.\n    this._onDispatch();\n\n    this._shouldUpdateLatestTransactionOnRef = true;\n  }\n\n  /**\n   * To be called on every React-Navigation action dispatch.\n   * It does not name the transaction or populate it with route information. Instead, it waits for the state to fully change\n   * and gets the route information from there, @see _onStateChange\n   */\n  private _onDispatch(): void {\n    this._latestTransaction = this.onRouteWillChange(\n      BLANK_TRANSACTION_CONTEXT_V5\n    );\n\n    this._stateChangeTimeout = setTimeout(\n      this._discardLatestTransaction.bind(this),\n      STATE_CHANGE_TIMEOUT_DURATION\n    );\n  }\n\n  /**\n   * To be called AFTER the state has been changed to populate the transaction with the current route.\n   */\n  private _onStateChange(): void {\n    // Use the getCurrentRoute method to be accurate.\n    const previousRoute = this._latestRoute;\n    const route = this._navigationContainerRef?.current?.getCurrentRoute();\n\n    if (route) {\n      if (\n        this._latestTransaction &&\n        (!previousRoute || previousRoute.key !== route.key)\n      ) {\n        const originalContext = this._latestTransaction.toContext() as typeof BLANK_TRANSACTION_CONTEXT_V5;\n        const routeHasBeenSeen = this._recentRouteKeys.includes(route.key);\n\n        const updatedContext: ReactNavigationTransactionContext = {\n          ...originalContext,\n          name: route.name,\n          tags: {\n            ...originalContext.tags,\n            \"routing.route.name\": route.name,\n          },\n          data: {\n            ...originalContext.data,\n            route: {\n              name: route.name,\n              key: route.key,\n              params: route.params ?? {},\n              hasBeenSeen: routeHasBeenSeen,\n            },\n            previousRoute: previousRoute\n              ? {\n                  name: previousRoute.name,\n                  key: previousRoute.key,\n                  params: previousRoute.params ?? {},\n                }\n              : null,\n          },\n        };\n\n        let finalContext = this._beforeNavigate?.(updatedContext);\n\n        // This block is to catch users not returning a transaction context\n        if (!finalContext) {\n          logger.error(\n            `[ReactNavigationV5Instrumentation] beforeNavigate returned ${finalContext}, return context.sampled = false to not send transaction.`\n          );\n\n          finalContext = {\n            ...updatedContext,\n            sampled: false,\n          };\n        }\n\n        if (finalContext.sampled) {\n          // Clear the timeout so the transaction does not get cancelled.\n          if (typeof this._stateChangeTimeout !== \"undefined\") {\n            clearTimeout(this._stateChangeTimeout);\n            this._stateChangeTimeout = undefined;\n          }\n        } else {\n          logger.log(\n            `[ReactNavigationV5Instrumentation] Will not send transaction \"${finalContext.name}\" due to beforeNavigate.`\n          );\n        }\n\n        this._latestTransaction.updateWithContext(finalContext);\n      }\n\n      this._pushRecentRouteKey(route.key);\n      this._latestRoute = route;\n    }\n  }\n\n  /** Pushes a recent route key, and removes earlier routes when there is greater than the max length */\n  private _pushRecentRouteKey = (key: string): void => {\n    this._recentRouteKeys.push(key);\n\n    if (this._recentRouteKeys.length > this._maxRecentRouteLen) {\n      this._recentRouteKeys = this._recentRouteKeys.slice(\n        this._recentRouteKeys.length - this._maxRecentRouteLen\n      );\n    }\n  };\n\n  /** Cancels the latest transaction so it does not get sent to Sentry. */\n  private _discardLatestTransaction(): void {\n    if (this._latestTransaction) {\n      this._latestTransaction.sampled = false;\n      this._latestTransaction.finish();\n      this._latestTransaction = undefined;\n    }\n  }\n}\n\nexport const BLANK_TRANSACTION_CONTEXT_V5 = {\n  name: \"Route Change\",\n  op: \"navigation\",\n  tags: {\n    \"routing.instrumentation\":\n      ReactNavigationV5Instrumentation.instrumentationName,\n  },\n  data: {},\n};\n"]}